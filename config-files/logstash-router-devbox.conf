input { 
   file {
	path => "/var/log/atlantis/router/**"
	start_position => beginning
	#sincedb_path => "~/"
   }
}

filter {
	grok {
		match => ["message", "%{SYSLOGPROG:syslogprog}: %{IP:client_ip}:%{NUMBER:client_port:int} \[%{HAPROXYDATE:accept_date}\] %{NOTSPACE:frontend_name} %{NOTSPACE:backend_name}/%{NOTSPACE:server_name} %{NUMBER:time_request:int}/%{NUMBER:time_queue:int}/%{NUMBER:time_backend_connect:int}/%{NUMBER:time_backend_response:int}/%{NUMBER:time_duration:int} %{NUMBER:http_status_code:int} %{NUMBER:bytes_read:int} %{DATA:captured_request_cookie} %{DATA:captured_response_cookie} %{NOTSPACE:termination_state} %{NUMBER:actconn:int}/%{NUMBER:feconn:int}/%{NUMBER:beconn:int}/%{NUMBER:srvconn:int}/%{NUMBER:retries:int} %{NUMBER:srv_queue:int}/%{NUMBER:backend_queue:int} (\{%{HAPROXYCAPTUREDREQUESTHEADERS}\})?( )?(\{%{HAPROXYCAPTUREDRESPONSEHEADERS}\})?( )?\"(<BADREQ>|(%{WORD:http_verb} (%{URIPROTO:http_proto}://)?(?:%{USER:http_user}(?::[^@]*)?@)?(?:%{URIHOST:http_host})?(?:%{URIPATHPARAM:http_request})?( HTTP/%{NUMBER:http_version})?))?\""]	
	}

	date {

		match => [ 'accept_date', 'dd/MMM/YYYY:HH:mm:ss.SSS', 'dd/MMM/YYYY:HH:mm:ss.SSSS', 'dd/MMM/YYYY:HH:mm:ss.SSSSS', 'dd/MMM/YYYY:HH:mm:ss.SSSSSS']
		target => '@timestamp'
	} 

	if "_grokparsefailure" in [tags] {
		mutate { add_field => { "from-logtype" => "router" } }
	}
}

output {

	if "_grokparsefailure" in [tags] {
		elasticsearch { 
			cluster => "elasticsearch-atlantis"
			host => "ec2-23-22-180-252.compute-1.amazonaws.com" 
			index => "parse-failures"
		}

	} else {
		elasticsearch {
			cluster => "elasticsearch-atlantis" 
			host => "ec2-23-22-180-252.compute-1.amazonaws.com" 
			index => "router-logs"
		}
	}
	
	
   stdout { codec => rubydebug }
}
